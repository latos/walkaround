<?xml version="1.0" encoding="utf-8" ?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
<meta name="generator" content="Docutils 0.5: http://docutils.sourceforge.net/" />
<title>Google Wave Attachments</title>
<meta name="authors" content="Michael Lancaster" />
<style type="text/css">

/*
:Author: David Goodger (goodger@python.org)
:Id: $Id: html4css1.css 5196 2007-06-03 20:25:28Z wiemann $
:Copyright: This stylesheet has been placed in the public domain.

Default cascading style sheet for the HTML output of Docutils.

See http://docutils.sf.net/docs/howto/html-stylesheets.html for how to
customize this style sheet.
*/

/* used to remove borders from tables and images */
.borderless, table.borderless td, table.borderless th {
  border: 0 }

table.borderless td, table.borderless th {
  /* Override padding for "table.docutils td" with "! important".
     The right padding separates the table cells. */
  padding: 0 0.5em 0 0 ! important }

.first {
  /* Override more specific margin styles with "! important". */
  margin-top: 0 ! important }

.last, .with-subtitle {
  margin-bottom: 0 ! important }

.hidden {
  display: none }

a.toc-backref {
  text-decoration: none ;
  color: black }

blockquote.epigraph {
  margin: 2em 5em ; }

dl.docutils dd {
  margin-bottom: 0.5em }

/* Uncomment (and remove this text!) to get bold-faced definition list terms
dl.docutils dt {
  font-weight: bold }
*/

div.abstract {
  margin: 2em 5em }

div.abstract p.topic-title {
  font-weight: bold ;
  text-align: center }

div.admonition, div.attention, div.caution, div.danger, div.error,
div.hint, div.important, div.note, div.tip, div.warning {
  margin: 2em ;
  border: medium outset ;
  padding: 1em }

div.admonition p.admonition-title, div.hint p.admonition-title,
div.important p.admonition-title, div.note p.admonition-title,
div.tip p.admonition-title {
  font-weight: bold ;
  font-family: sans-serif }

div.attention p.admonition-title, div.caution p.admonition-title,
div.danger p.admonition-title, div.error p.admonition-title,
div.warning p.admonition-title {
  color: red ;
  font-weight: bold ;
  font-family: sans-serif }

/* Uncomment (and remove this text!) to get reduced vertical space in
   compound paragraphs.
div.compound .compound-first, div.compound .compound-middle {
  margin-bottom: 0.5em }

div.compound .compound-last, div.compound .compound-middle {
  margin-top: 0.5em }
*/

div.dedication {
  margin: 2em 5em ;
  text-align: center ;
  font-style: italic }

div.dedication p.topic-title {
  font-weight: bold ;
  font-style: normal }

div.figure {
  margin-left: 2em ;
  margin-right: 2em }

div.footer, div.header {
  clear: both;
  font-size: smaller }

div.line-block {
  display: block ;
  margin-top: 1em ;
  margin-bottom: 1em }

div.line-block div.line-block {
  margin-top: 0 ;
  margin-bottom: 0 ;
  margin-left: 1.5em }

div.sidebar {
  margin: 0 0 0.5em 1em ;
  border: medium outset ;
  padding: 1em ;
  background-color: #ffffee ;
  width: 40% ;
  float: right ;
  clear: right }

div.sidebar p.rubric {
  font-family: sans-serif ;
  font-size: medium }

div.system-messages {
  margin: 5em }

div.system-messages h1 {
  color: red }

div.system-message {
  border: medium outset ;
  padding: 1em }

div.system-message p.system-message-title {
  color: red ;
  font-weight: bold }

div.topic {
  margin: 2em }

h1.section-subtitle, h2.section-subtitle, h3.section-subtitle,
h4.section-subtitle, h5.section-subtitle, h6.section-subtitle {
  margin-top: 0.4em }

h1.title {
  text-align: center }

h2.subtitle {
  text-align: center }

hr.docutils {
  width: 75% }

img.align-left {
  clear: left }

img.align-right {
  clear: right }

ol.simple, ul.simple {
  margin-bottom: 1em }

ol.arabic {
  list-style: decimal }

ol.loweralpha {
  list-style: lower-alpha }

ol.upperalpha {
  list-style: upper-alpha }

ol.lowerroman {
  list-style: lower-roman }

ol.upperroman {
  list-style: upper-roman }

p.attribution {
  text-align: right ;
  margin-left: 50% }

p.caption {
  font-style: italic }

p.credits {
  font-style: italic ;
  font-size: smaller }

p.label {
  white-space: nowrap }

p.rubric {
  font-weight: bold ;
  font-size: larger ;
  color: maroon ;
  text-align: center }

p.sidebar-title {
  font-family: sans-serif ;
  font-weight: bold ;
  font-size: larger }

p.sidebar-subtitle {
  font-family: sans-serif ;
  font-weight: bold }

p.topic-title {
  font-weight: bold }

pre.address {
  margin-bottom: 0 ;
  margin-top: 0 ;
  font-family: serif ;
  font-size: 100% }

pre.literal-block, pre.doctest-block {
  margin-left: 2em ;
  margin-right: 2em }

span.classifier {
  font-family: sans-serif ;
  font-style: oblique }

span.classifier-delimiter {
  font-family: sans-serif ;
  font-weight: bold }

span.interpreted {
  font-family: sans-serif }

span.option {
  white-space: nowrap }

span.pre {
  white-space: pre }

span.problematic {
  color: red }

span.section-subtitle {
  /* font-size relative to parent (h1..h6 element) */
  font-size: 80% }

table.citation {
  border-left: solid 1px gray;
  margin-left: 1px }

table.docinfo {
  margin: 2em 4em }

table.docutils {
  margin-top: 0.5em ;
  margin-bottom: 0.5em }

table.footnote {
  border-left: solid 1px black;
  margin-left: 1px }

table.docutils td, table.docutils th,
table.docinfo td, table.docinfo th {
  padding-left: 0.5em ;
  padding-right: 0.5em ;
  vertical-align: top }

table.docutils th.field-name, table.docinfo th.docinfo-name {
  font-weight: bold ;
  text-align: left ;
  white-space: nowrap ;
  padding-left: 0 }

h1 tt.docutils, h2 tt.docutils, h3 tt.docutils,
h4 tt.docutils, h5 tt.docutils, h6 tt.docutils {
  font-size: 100% }

ul.auto-toc {
  list-style-type: none }

</style>
</head>
<body>
<div class="document" id="google-wave-attachments">
<h1 class="title">Google Wave Attachments</h1>
<table class="docinfo" frame="void" rules="none">
<col class="docinfo-name" />
<col class="docinfo-content" />
<tbody valign="top">
<tr><th class="docinfo-name">Authors:</th>
<td>Michael Lancaster</td></tr>
<tr><th class="docinfo-name">Version:</th>
<td>1.0 - May 2009</td></tr>
</tbody>
</table>
<p>Wave messages may contain embedded binary attachments, such as images, PDF
documents and ZIP archives. Because these binary files are qualitatively and
quantitatively different to other wave content (rich text), they are handled as
a somewhat special case within Google Wave. This document gives an overview on
how attachments are represented within Google Wave, and how the servers
interoperate to handle attachment uploading and serving.</p>
<p>This whitepaper is part of a series. All of the whitepapers
can be found on <a class="reference external" href="http://www.waveprotocol.org/whitepapers">Google Wave Federation Protocol site</a>.</p>
<div class="section" id="high-level-summary">
<h1>High level summary</h1>
<p>Attachments are represented within a wave by an XML document, allowing changes
(in upload progress, for instance) to be propagated to all users on the wave.
Each attachment has a corresponding thumbnail image. For image attachments,
this thumbnail is actually a small version of the image itself. In order to
reduce latency for image attachments, HTML5 or Gears enabled clients may
generate and upload a thumbnail before the image itself. For most other
attachment types, the thumbnail is a generic representation of the attachment
type (base on MIME type). Attachments are uploaded by the wave client using
HTTP POST, and download of both attachments and their thumbnails is done using
HTTP GET.</p>
</div>
<div class="section" id="architecture">
<h1>Architecture</h1>
<p>Attachment management is handled by a dedicated attachment server. This server
is responsible for handling create, upload and download requests, generating
thumbnails, reprocessing images, malware scanning, as well as for
communications with the attachment store.</p>
<p>The attachment server acts as an HTTP server (for handling attachment
operations from the client), an RPC server (for handling attachment operations
from internal agents, such as the mail gateway), and an RPC client for
propagating attachment metadata to the wave server (see Google Wave Federation
Architecture for details on the overall Google Wave architecture).</p>
<img alt="img/attachment-server-architecture.png" src="img/attachment-server-architecture.png" />
</div>
<div class="section" id="schema">
<h1>Schema</h1>
<p>Each attachment has a globally unique ID string, composed of the wave service
provider domain, and a string that is unique for that provider. An example
attachment ID for the wave sandbox wave provider would be
&quot;wavesandbox.com/3eb1c8ba-172b-4b1a-ae5b-d3140ed85c42&quot;. Each attachment is
represented by a row in a replicated Bigtable (a Google proprietary scalable
distributed database). The attachment metadata is represented by a protocol
buffer stored in a column on that row. This protocol buffer contains such
fields as the attachment size, upload progress, filename of the attachment, as
well as a list of all wavelets that reference this attachment. The binary data
for the thumbnail and attachment are each stored in separate columns on the
same row.</p>
<p>Thus an attachment row in the Bigtable looks like:</p>
<dl class="docutils">
<dt>AttachmentMetadata</dt>
<dd>contains the metadata protocol buffer,</dd>
<dt>ThumbnailData</dt>
<dd>used to store the thumbnail BLOB (binary large object),</dd>
<dt>AttachmentData</dt>
<dd>used to store the attachment BLOB, for small attachments</dd>
</dl>
<p>Large attachments are stored in a separate Bigtable for better storage
efficiency.</p>
<p>For performance, and simplicity of design, a subset of the attachment metadata
is also copied to any wavelets which reference the attachment. Storing this
metadata in the wavelet means that we don't have to do anything special at wave
load time to ensure that the client has a copy of the attachment metadata.
Whenever the attachment server makes a modification to the attachment metadata,
it pushes out the change to all relevant wavelets (via RPC to the wave
server(s)).</p>
<p>This copy of the metadata is represented by an XML sub-document on a data
document within the wavelet. The ID of the Data Document is based on the
attachment ID such that there is exactly one attachment data document for each
attachment on a given wavelet.</p>
<p>The attachment metadata XML sub-document is defined by the following RNC (Relax
NG) schema:</p>
<pre class="literal-block">
element attachment {
  attribute attachmentId { text },
  attribute uploadProgress { xsd:integer },
  attribute attachmentSize { xsd:integer },
  attribute malware{ 0, 1 },
  attribute stalled { 0, 1 }? // default = 0
  attribute filename { text },
  attribute mimeType { text },
  attribute downloadToken { text },
  element thumbnail {
    attribute width { xsd:integer },
    attribute height { xsd:integer },
    attribute clientGenerated { 0, 1 }? // default=0
  }?
  element image {
    attribute width { xsd:integer },
    attribute height { xsd:integer }
 }?
}
</pre>
<p>Changes to the attachment record are replicated to all waves which refer to
that attachment.</p>
<p>The blip in which the attachment was inserted also contains an XML node which
references the attachment, located at the insertion point of the attachment.
This XML element (known as the embed) is a placeholder for the thumbnail to be
rendered and takes the form:</p>
<pre class="literal-block">
&lt;w:image attachment=&quot;attachment id&quot;&gt;&lt;w:caption&gt;the thumbnail caption&lt;/w:caption&gt;&lt;/w:image&gt;
</pre>
</div>
<div class="section" id="attachment-creation">
<h1>Attachment Creation</h1>
<p>Attachments may be &quot;created&quot; in several different ways:</p>
<ul class="simple">
<li>Uploading a thumbnail for the attachment</li>
<li>Uploading the attachment blob itself (or the first N bytes)</li>
<li>Linking an existing attachment to a new wave</li>
</ul>
<p>Each of these actions is represented by an attachment creation request.
Attachment creation requests are sent as an HTTP POST, and may be either sent
as an HTTP multipart request (enctype=multipart/form-data), or as a plain POST
(enctype=application/x-www-form-urlencoded). The multipart POST is accepted to
allow file uploads from non-Gears / HTML5 enabled browsers.</p>
<p>In either case, the following fields may be sent either as HTTP POST
parameters, or in the HTTP header:</p>
<pre class="literal-block">
required string attachmentId;
required string waveletName;
required int uploadType; // 0 for attachment, 1 for thumbnail
optional bool complete; // true if data field represents the entire attachment
optional int thumbnail_width;
optional int thumbnail_height;
</pre>
<p>For the non-multipart case, the filename is also optionally provided in the
parameters / header.:</p>
<pre class="literal-block">
optional string fileName;
</pre>
<p>and the bytes of the attachment / thumbnail are sent as the body of the POST.</p>
<p>In the multipart case, only the part with name set to &quot;uploadAttachment&quot; is
read, any other uploaded files are ignored. The filename is read from the
filename field in the content-disposition for the file.</p>
<p>Create requests are idempotent, so for instance it's okay to send one creation
request with a thumbnail, and another with the first chunk of the attachment
data. If the attachment record already exists, but the waveletName field does
not correspond to any of the wavelets currently linked to the attachment, the
existing attachment will be linked to the provided wavelet. Other fields which
are already present in the existing attachment will be ignored.</p>
<p>Example creation flow:</p>
<ol class="arabic simple">
<li>User initiates attachment creation by dragging an image into the browser (using Gears)</li>
<li>Client generates a globally unique ID for the attachment</li>
<li>Client thumbnails the image (using Gears) and displays it locally by adding an &lt;image&gt; tag to the blip (other clients seeing the &lt;image&gt; tag will display an empty thumbnail frame). The client then sends an HTTP POST containing a create request, and the thumbnail data, to the Attachment server (via WFE)</li>
<li>Attachment server creates a record in permanent storage for the attachment and stores the (re-encoded for security) user-provided thumbnail</li>
<li>Attachment server returns success to the client</li>
<li>Attachment server creates a data document on the wavelet and adds a copy of the attachment metadata.</li>
<li>Thumbnail is now ready to download</li>
<li>Client sends an HTTP POST containing the attachment</li>
<li>Attachment server updates the attachment record in permanent storage</li>
<li>Attachment server returns success to the client</li>
<li>Attachment server generates a thumbnail for the attachment</li>
<li>Image attachments are reprocessed to prevent XSS attacks, and attachments are scanned for malware</li>
<li>Attachment server updates the attachment data document on the wavelet</li>
<li>Attachment is now ready to download</li>
</ol>
<p>Steps 8-14 may happen in parallel with 3-7.</p>
<p>Below is an example of a multipart (non-Gears) creation request:</p>
<pre class="literal-block">
POST /wfe/upload/result HTTP/1.1
Host: wave.google.com
Content-Type: multipart/form-data; boundary=---------------------------10102754414578508781458777923
Content-Length: 195197
-----------------------------10102754414578508781458777923
Content-Disposition: form-data; name=&quot;uploadAttachment&quot;; filename=&quot;Downtown.pdf&quot;
Content-Type: application/pdf

&lt;encoded attachment binary data here&gt;

-----------------------------10102754414578508781458777923
Content-Disposition: form-data; name=&quot;waveletName&quot;

wavesandbox.com/w+6bf32acc-bd29-45c2-a252-699af690f5a6/conv+root
-----------------------------10102754414578508781458777923
Content-Disposition: form-data; name=&quot;attachmentId&quot;

wavesandbox.com/3eb1c8ba-172b-4b1a-ae5b-d3140ed85c42

-----------------------------10102754414578508781458777923
Content-Disposition: form-data; name=&quot;uploadType&quot;

0
-----------------------------10102754414578508781458777923--
</pre>
</div>
<div class="section" id="uploading">
<h1>Uploading</h1>
<p>Clients may upload large attachments in multiple chunks using an upload request:</p>
<pre class="literal-block">
required string attachmentId;
required int offset;
optional int fullSize;
</pre>
<p>The binary data is sent as per the creation request. Either multipart or form
POSTs are accepted.</p>
<p>An upload request may not be sent until the upload request (or create request)
for the previous chunk has been acknowledged. That is, we don't currently
support pipelining. Chunks must not overlap. Behaviour is not specified if
chunk boundaries overlap.</p>
<p>The response to HTTP upload / create requests is a string containing a single
JSON object of the form:</p>
<pre class="literal-block">
{
  responseCode: &lt;response&gt;,
  errorMessage: &quot;&lt;error message&gt; &quot;
}
</pre>
<p>Possible values for the responseCode field are:</p>
<pre class="literal-block">
0 (OK)
1 (INVALID_TOKEN)
2 (INVALID_REQUEST)
1000 (INTERNAL_SERVER_ERROR)
</pre>
<p>The errorMessage field will not be provided for the non-error case (OK).
Otherwise, it will contain a human-readable (although not necessarily end-user
friendly) error message.</p>
<p>In conjunction with these custom error codes, HTTP response codes should also
be respected, however, due to limitations with cross-domain POSTs, the JSON
response codes are used in preference.</p>
</div>
<div class="section" id="attachment-thumbnail-download">
<h1>Attachment / Thumbnail download</h1>
<p>A download request takes the following form:</p>
<pre class="literal-block">
required string attachmentId;
required string downloadToken;
</pre>
<p>Requests for thumbnails / attachments are sent on different URLs, but otherwise
look identical.</p>
<p>The response to these requests is an HTTP response containing the bytes of the
attachment / thumbnail, with the HTTP Content-Disposition header set to
&quot;attachment&quot;. The mime type of the response is set to the mime type of the
attachment or thumbnail.</p>
</div>
<div class="section" id="authentication-authorization">
<h1>Authentication / Authorization</h1>
<p>Google web-apps use a centralized cookie-based authentication system.
Authentication for upload and creation requests uses this system. In order to
write the corresponding attachment data document into an associated wavelet,
the user must be a participant on that wavelet.</p>
<p>Downloads are authenticated using a download token which is stored in the
attachment data document on the wavelet. Thus to download an attachment or a
thumbnail, the user must at some point in time have had access to both the
attachment id and the download token.</p>
</div>
<div class="section" id="duplicate-elimination">
<h1>Duplicate elimination</h1>
<p>Because we expect a large percentage of attachments to be duplicates, we have
an offline de-duping procedure. We store a weak hash with each attachment, and
an offline process indexes attachments by hash, detects collisions, and then
does a byte-by-byte comparison to eliminate duplicates. This is only done on
attachments that are completely uploaded, and effectively immutable, and only
on 'large' blobs, which are stored in a separate store. We maintain a level of
indirection for these large blobs, so that we don't have to update the pointers
upon duplicate detection and to prevent the leakage of information about the
existence of previously uploaded attachments.</p>
</div>
<div class="section" id="references">
<h1>References</h1>
<ul class="simple">
<li><ol class="first upperalpha" start="5">
<li>Nebel and L. Masinter, <a class="reference external" href="http://www.ietf.org/rfc/rfc1867.txt">Form-based File Upload in HTML</a>, IETF RFC 1867, November 1995</li>
</ol>
</li>
<li><ol class="first upperalpha" start="6">
<li>Chang et al., <a class="reference external" href="http://labs.google.com/papers/bigtable.html">Google Research Publication: Bigtable</a>, OSDI'06: Seventh Symposium on Operating System Design and Implementation, November 2006.</li>
</ol>
</li>
<li><ol class="first upperalpha" start="19">
<li>Lassen and S. Thorogood, <a class="reference external" href="http://www.waveprotocol.org/whitepapers/google-wave-architecture">Google Wave Federation Architecture</a>, June 2009</li>
</ol>
</li>
</ul>
</div>
</div>
</body>
</html>
